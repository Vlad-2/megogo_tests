{"uuid":"7c2f0b42-d2de-48a4-bc7b-c98ac1e978f9","historyId":"b91c71dd8dcba548c5eeb6b8d1975abd","fullName":"tests.apiTests.NtpServerTest.testNtpServer","labels":[{"name":"package","value":"tests.apiTests.NtpServerTest"},{"name":"testClass","value":"tests.apiTests.NtpServerTest"},{"name":"testMethod","value":"testNtpServer"},{"name":"parentSuite","value":"Default Suite"},{"name":"suite","value":"megogo_tests"},{"name":"subSuite","value":"tests.apiTests.NtpServerTest"},{"name":"host","value":"DESKTOP-UNOR29U"},{"name":"thread","value":"17840@DESKTOP-UNOR29U.TestNG-PoolService-5(29)"},{"name":"framework","value":"testng"},{"name":"language","value":"java"}],"links":[],"name":"testNtpServer","status":"failed","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"\r\nExpecting actual:\r\n  IpAddressInfoDTO(query=4.ua.pool.ntp.org, status=fail, continent=null, continentCode=null, country=null, countryCode=null, region=null, regionName=null, city=null, district=null, zip=null, lat=0.0, lon=0.0, timezone=null, offset=null, currency=null, isp=null, org=null, as=null, asname=null, mobile=false, proxy=false, hosting=false)\r\nto be equal to:\r\n  IpAddressInfoDTO(query=null, status=null, continent=null, continentCode=null, country=Ukraine, countryCode=null, region=null, regionName=null, city=null, district=null, zip=null, lat=0.0, lon=0.0, timezone=null, offset=null, currency=null, isp=null, org=null, as=null, asname=null, mobile=false, proxy=false, hosting=false)\r\nwhen recursively comparing field by field, but found the following difference:\r\n\r\nfield/property 'country' differ:\r\n- actual value  : null\r\n- expected value: \"Ukraine\"\r\n\r\nThe recursive comparison was performed with this configuration:\r\n- the comparison was performed on the following fields: country\r\n- no overridden equals methods were used in the comparison (except for java types)\r\n- these types were compared with the following comparators:\r\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\r\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\r\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\r\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\r\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\r\n","trace":"java.lang.AssertionError: \r\nExpecting actual:\r\n  IpAddressInfoDTO(query=4.ua.pool.ntp.org, status=fail, continent=null, continentCode=null, country=null, countryCode=null, region=null, regionName=null, city=null, district=null, zip=null, lat=0.0, lon=0.0, timezone=null, offset=null, currency=null, isp=null, org=null, as=null, asname=null, mobile=false, proxy=false, hosting=false)\r\nto be equal to:\r\n  IpAddressInfoDTO(query=null, status=null, continent=null, continentCode=null, country=Ukraine, countryCode=null, region=null, regionName=null, city=null, district=null, zip=null, lat=0.0, lon=0.0, timezone=null, offset=null, currency=null, isp=null, org=null, as=null, asname=null, mobile=false, proxy=false, hosting=false)\r\nwhen recursively comparing field by field, but found the following difference:\r\n\r\nfield/property 'country' differ:\r\n- actual value  : null\r\n- expected value: \"Ukraine\"\r\n\r\nThe recursive comparison was performed with this configuration:\r\n- the comparison was performed on the following fields: country\r\n- no overridden equals methods were used in the comparison (except for java types)\r\n- these types were compared with the following comparators:\r\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\r\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\r\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\r\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\r\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\r\n\r\n\tat tests.apiTests.NtpServerTest.testNtpServer(NtpServerTest.java:34)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\r\n\tat org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)\r\n\tat org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)\r\n\tat org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)\r\n\tat org.testng.internal.invokers.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:81)\r\n\tat org.testng.internal.thread.Async$AsyncTask.run(Async.java:34)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\r\n\tat java.base/java.lang.Thread.run(Thread.java:842)\r\n"},"stage":"finished","steps":[{"name":"    1. GET https://demo.ip-api.com/json/4.ua.pool.ntp.org?fields=66842623&lang=en","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"step","value":"1. GET https://demo.ip-api.com/json/4.ua.pool.ntp.org?fields=66842623&lang=en"}],"start":1732225105430,"stop":1732225105438},{"name":"    2. Verify that location is in Ukraine","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"step","value":"2. Verify that location is in Ukraine"}],"start":1732225109027,"stop":1732225109027}],"attachments":[],"parameters":[{"name":"arg0","value":"4.ua.pool.ntp.org"}],"start":1732225105383,"stop":1732225109302}